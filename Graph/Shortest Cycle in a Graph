//https://leetcode.com/problems/shortest-cycle-in-a-graph/description/
class Solution {
public:
    
 
    int findShortestCycle(int n, vector<vector<int>>& edges) {
        vector<int>adj[n];
        for(auto it:edges){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }

        int ans=INT_MAX;

        for(int i=0;i<n;i++){
            vector<int>dist(n,-1);
            queue<pair<int,int>>q;
            q.push({i,-1});
            dist[i]=0;

            while(!q.empty()){
                int node=q.front().first;
                int parent=q.front().second;
                q.pop();

                for(auto it:adj[node]){
                    if(dist[it]==-1){
                        dist[it]=dist[node]+1;
                        q.push({it,node});
                    }else if(it!=parent){
                        ans=min(ans,dist[node]+dist[it]+1);
                    }
                }
            }
        }

        

        if(ans==INT_MAX){
            return -1;
        }return ans;

    }
};
