//https://leetcode.com/problems/cheapest-flights-within-k-stops/
class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<pair<int,int>>adj[n];
        for(auto it:flights){
            adj[it[0]].push_back({it[1],it[2]});
        }

        queue<pair<int,pair<int,int>>>q;
        q.push({0,{src,0}});
        vector<int>dist(n,1e9);
        dist[src]=0;
        while(!q.empty()){
            int stop=q.front().first;
            int node=q.front().second.first;
            int wt=q.front().second.second;
            q.pop();

            if(stop>k){
                continue;
            }

            for(auto it:adj[node]){
                int anode=it.first;
                int awt=it.second;
                if(dist[anode]>awt+wt && stop<=k){
                    dist[anode]=awt+wt;
                    q.push({stop+1,{anode,awt+wt}});
                }
            }
        }
        if(dist[dst]==1e9){
            return -1;
        }return dist[dst];
    }
};
