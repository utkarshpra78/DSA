 //https://leetcode.com/problems/house-robber-iii/description/

//337. House Robber III

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
map<TreeNode*,int>mpp;
    int f(TreeNode* root){
        if(root==NULL){
            return 0;
        }
        if(mpp.count(root)){
            return mpp[root];
        }
        int ans=0;
        if(root->left !=NULL){
            ans+=(f(root->left->left)+f(root->left->right));
        }
        if(root->right!=NULL){
            ans+=(f(root->right->left)+f(root->right->right));
        }
        return mpp[root]=max(root->val+ans,f(root->left)+f(root->right));
    }
    int rob(TreeNode* root) {
        return f(root);
    }
};
