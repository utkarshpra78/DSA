//https://leetcode.com/problems/shortest-path-visiting-all-nodes/submissions/
class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        queue<pair<int,int>>q;
        int path=0;
        map<pair<int,int>,int>mpp;
        int n=graph.size();

        for(int i=0;i<n;i++){
            q.push({i,1<<i});
            mpp[{i,1<<i}]=1;
        }

        while(!q.empty()){
            int m=q.size();
            path++;

            for(int i=0;i<m;i++){
                int node=q.front().first;
                int mask=q.front().second;
                q.pop();
                if(mask==(1<<n)-1){
                    return path-1;
                } 

                for(auto it:graph[node]){
                    int nmask=mask | 1<<it;
                    if(!mpp[{it,nmask}]){
                        mpp[{it,nmask}]=1;
                        q.push({it,nmask});
                    }
                }
            }
        }
        return path;

    }
};
