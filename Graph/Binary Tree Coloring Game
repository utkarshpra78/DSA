//https://leetcode.com/problems/binary-tree-coloring-game/description/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* X;
    int dfs(TreeNode* root,int n,int x,vector<int>&child){
        if(root==NULL){
            return 0;
        }
        if(root->val==x){
            X=root;
        }
        int left=dfs(root->left,n,x,child);
        int right=dfs(root->right,n,x,child);
        child[root->val]=1+right+left;
        return child[root->val];
    }


    bool btreeGameWinningMove(TreeNode* root, int n, int x) {
        vector<int>child(n+1,0);
        dfs(root,n,x,child);

        vector<int>v(3,0);
        if(X->left!=NULL)v[1]=child[X->left->val];
        if(X->right!=NULL)v[2]=child[X->right->val];
        v[0]=n-child[x];
        if(v[0]>v[1]+v[2]){
            return 1;
        }
        if(v[1]>v[0]+v[2]){
            return 1;
        }
        if(v[2]>v[1]+v[0]){
            return 1;
        }
        return 0;
    }
};
