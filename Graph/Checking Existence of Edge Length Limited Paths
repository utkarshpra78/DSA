//https://leetcode.com/problems/checking-existence-of-edge-length-limited-paths/description/
class disjointset{
public:
    vector<int> rank,parent,size;
 
    disjointset(int n){
       rank.resize(n+1,0);
       parent.resize(n+1);
       size.resize(n+1);
 
       for(int i=0;i<n;i++){
          parent[i] = i;
          size[i] = 1;
       }
    }
 
    int findUPar(int node){
       if(node == parent[node]){
          return node;
       }
       return parent[node] = findUPar(parent[node]);
    }
    
    void unionBySize(int u,int v){
       int ulp_u = findUPar(u);
       int ulp_v = findUPar(v);
       if(ulp_u == ulp_v) return;
       if(size[ulp_u] < size[ulp_v]){
          parent[ulp_u] = ulp_v;
          size[ulp_v]+=size[ulp_u];
       }
       else{
          parent[ulp_v] = ulp_u;
          size[ulp_u]+=size[ulp_v];
       }
    }  
 };


class Solution {
public:
    static bool cmp(vector<int>&a,vector<int>&b){
        return a[2]<b[2];
    }
    vector<bool> distanceLimitedPathsExist(int n, vector<vector<int>>& edgeList, vector<vector<int>>& queries) {
        disjointset ds(n);
        for(int i=0;i<queries.size();i++){
            queries[i].push_back(i);
        }

        sort(edgeList.begin(),edgeList.end(),cmp);
        sort(queries.begin(),queries.end(),cmp);
        vector<bool>a(queries.size(),0);

        int j=0;
        for(int i=0;i<queries.size();i++){
            int u=queries[i][0];
            int v=queries[i][1];
            int t=queries[i][2];
            int id=queries[i][3];
            while(j<edgeList.size() && edgeList[j][2]<t){
                ds.unionBySize(edgeList[j][0],edgeList[j][1]);
                j++;
            }
            if(ds.findUPar(u)==ds.findUPar(v)){
                a[id]=1;
            }
        }
        return a;

    }
};
