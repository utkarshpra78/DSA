//https://leetcode.com/problems/binary-tree-paths/description/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>>ans;
    void f(TreeNode* root,vector<int> s){
        s.push_back(root->val);
        if(root->left==NULL && root->right==NULL){ 
            ans.push_back(s); 
        } 
        if(root->left!=NULL){
            f(root->left,s);
        }
        if(root->right!=NULL){
            f(root->right,s);
        }
    }
    vector<string> binaryTreePaths(TreeNode* root) { 
        vector<int>a;
        f(root,a);
        int n=ans.size();
        int i=0;
        vector<string>v; 
        string z;
        for(auto itt:ans){
            for(auto it:itt){
                z+=(to_string(it)+"->");
            }
            z.pop_back();
            z.pop_back();
            v.push_back(z);
            z="";
        }
        return v;
    }
};
