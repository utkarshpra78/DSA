//https://leetcode.com/problems/partition-array-for-maximum-sum/description/?envType=daily-question&envId=2024-02-03

//1043. Partition Array for Maximum Sum

class Solution {
public:
    int dp[505][505];
    int f(int ind,int c,vector<int>&v,int &k){
        if(ind==v.size()){
            return 0;
        }
        if(dp[ind][c]!=-1){
            return dp[ind][c];
        }
        int maxi=INT_MIN;
        int m=ind;
        int h=c;
        while(h--){
            maxi=max(maxi,v[m]);
            m--;
        }
        int a=maxi*c+f(ind+1,1,v,k);
        int b=0;
        if(c<k){
            b=f(ind+1,c+1,v,k);
        }
        return dp[ind][c]=max(a,b);  
    }

    int maxSumAfterPartitioning(vector<int>& arr, int k) {
        memset(dp,-1,sizeof(dp));
        return f(0,1,arr,k);
    }
};
