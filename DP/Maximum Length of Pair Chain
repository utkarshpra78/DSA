//https://leetcode.com/problems/maximum-length-of-pair-chain/description/

//646. Maximum Length of Pair Chain

class Solution {
public:
    static bool cmp(vector<int>&a,vector<int>&b){
        return a[0]<b[0];
    }
    int findLongestChain(vector<vector<int>>& pairs) {
        sort(pairs.begin(),pairs.end(),cmp);
        int n=pairs.size();
        vector<int>dp(n,1);
        for(int i=0;i<n;i++){
            for(int j=i-1;j>=0;j--){
                if(pairs[i][0]>pairs[j][1]){
                    dp[i]=max(dp[i],dp[j]+1);
                }
            }
        }
        return *max_element(dp.begin(),dp.end());
    }
};

___________________________________________________________________________________________________________

class Solution {
public:
	int solve(int i,int prev,vector<vector<int>>& pairs,int n,vector<vector<int>>& dp){
		if(i==n) return 0;

		if(dp[i][prev+1]!=-1) return dp[i][prev+1];

		int pick=-1e9;

		if(prev==-1 || pairs[prev][1]<pairs[i][0])pick=1+solve(i+1,i,pairs,n,dp);
		int not_pick=solve(i+1,prev,pairs,n,dp);

		return dp[i][prev+1]=max(pick,not_pick);
	}

	int findLongestChain(vector<vector<int>>& pairs) {
		int n=pairs.size();
		sort(pairs.begin(),pairs.end());
		vector<vector<int>> dp(n,vector<int>(n+1,-1));
		return solve(0,-1,pairs,n,dp);
	}
};
